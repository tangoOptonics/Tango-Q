package com.tangoplus.tangoq.dialog

import android.annotation.SuppressLint
import android.app.AlertDialog
import android.content.ContentValues
import android.content.Context.INPUT_METHOD_SERVICE
import android.graphics.Color
import android.graphics.drawable.ColorDrawable
import android.os.Build
import android.os.Bundle
import android.text.Editable
import android.text.TextWatcher
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.view.WindowManager
import android.view.animation.AlphaAnimation
import android.view.inputmethod.InputMethodManager
import android.widget.AdapterView
import androidx.annotation.RequiresApi
import androidx.core.content.ContextCompat.getSystemService
import androidx.fragment.app.DialogFragment
import androidx.fragment.app.viewModels
import com.google.android.material.snackbar.Snackbar
import com.google.android.material.tabs.TabLayout
import com.google.android.material.tabs.TabLayout.OnTabSelectedListener
import com.google.firebase.FirebaseException
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.PhoneAuthCredential
import com.google.firebase.auth.PhoneAuthOptions
import com.google.firebase.auth.PhoneAuthProvider
import com.google.firebase.auth.ktx.auth
import com.google.firebase.ktx.Firebase
import com.tangoplus.tangoq.R
import com.tangoplus.tangoq.adapter.SpinnerAdapter
import com.tangoplus.tangoq.data.SignInViewModel
import com.tangoplus.tangoq.databinding.FragmentFindAccountDialogBinding
import com.tangoplus.tangoq.`object`.NetworkUser.getUserBySdk
import com.tangoplus.tangoq.`object`.NetworkUser.getUserIdentifyJson
import java.util.concurrent.TimeUnit
import java.util.regex.Pattern


class FindAccountDialogFragment : DialogFragment() {
    lateinit var binding : FragmentFindAccountDialogBinding
    private lateinit var firebaseAuth : FirebaseAuth
    val viewModel : SignInViewModel by viewModels()
    var verificationId = ""

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentFindAccountDialogBinding.inflate(inflater)
        return binding.root
    }

    @SuppressLint("SetTextI18n")
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        // ------! Ï¥àÍ∏∞ ÏÑ∏ÌåÖ ÏãúÏûë !------
        binding.clFADId.visibility = View.GONE
        binding.clFADIdResult.visibility = View.GONE
        binding.clFADResetPassword.visibility = View.GONE
        firebaseAuth = Firebase.auth
        binding.btnFADAuthSend.isEnabled = false
        // ------! Ï¥àÍ∏∞ ÏÑ∏ÌåÖ ÎÅù !------

        binding.ibtnFADBack.setOnClickListener { dismiss() }
        // ------! ÌÉ≠ÏúºÎ°ú ÏïÑÏù¥Îîî ÎπÑÎ∞ÄÎ≤àÌò∏ Î†àÏù¥ÏïÑÏõÉ ÎÇòÎàÑÍ∏∞ ÏãúÏûë !------
        binding.tlFAB.addOnTabSelectedListener(object : OnTabSelectedListener{
            override fun onTabSelected(tab: TabLayout.Tab?) {
                val imm = context?.getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager?
                imm!!.hideSoftInputFromWindow(view.windowToken, 0)
                when(tab?.position) {
                    0 -> {
                        binding.clFADMobile.visibility = View.VISIBLE
                        binding.clFADId.visibility = View.GONE
                        binding.clFADIdResult.visibility = View.GONE
                        binding.clFADResetPassword.visibility = View.GONE
                        binding.btnFADConfirm.text = "Ïù∏Ï¶ù ÌïòÍ∏∞"
                        binding.btnFADConfirm.isEnabled = false
                    }
                    1 -> {
                        binding.clFADMobile.visibility = View.VISIBLE
                        binding.clFADId.visibility = View.VISIBLE
                        binding.clFADIdResult.visibility = View.GONE
                        binding.clFADResetPassword.visibility = View.GONE
                        binding.btnFADConfirm.text = "ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞"
                        binding.btnFADConfirm.isEnabled = true
                        binding.etFADAuthNumber.text = null
                        binding.etFADMobile.text = null

                    }
                }
            }
            override fun onTabUnselected(tab: TabLayout.Tab?) {}
            override fun onTabReselected(tab: TabLayout.Tab?) {}
        })
        // ------! ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï ÏãúÏûë !------

        // ------! Ìï∏ÎìúÌè∞ Î≤àÌò∏ - ÏãúÏûë !------
        val mobilePattern = "^010-\\d{4}-\\d{4}\$"
        val mobilePatternCheck = Pattern.compile(mobilePattern)
        binding.etFADMobile.addTextChangedListener(object: TextWatcher {
            private var isFormatting = false
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
            override fun afterTextChanged(s: Editable?) {
                if (isFormatting) return
                isFormatting = true
                val cleaned =s.toString().replace("-", "")
                when {
                    cleaned.length <= 3 -> s?.replace(0, s.length, cleaned)
                    cleaned.length <= 7 -> s?.replace(0, s.length, "${cleaned.substring(0, 3)}-${cleaned.substring(3)}")
                    else -> s?.replace(0, s.length, "${cleaned.substring(0, 3)}-${cleaned.substring(3, 7)}-${cleaned.substring(7)}")
                }
                isFormatting = false
                Log.w("Ï†ÑÌôîÎ≤àÌò∏ÌòïÏãù", "${mobilePatternCheck.matcher(binding.etFADMobile.text.toString()).find()}")
                viewModel.mobileCondition.value = mobilePatternCheck.matcher(binding.etFADMobile.text.toString()).find()
                if (viewModel.mobileCondition.value == true) {
                    viewModel.User.value?.put("user_mobile", s.toString() )
                    binding.btnFADAuthSend.isEnabled = true
                }

            }
        }) // ------! Ìï∏ÎìúÌè∞ Î≤àÌò∏ - ÏãúÏûë !------

        // ------! Ïù∏Ï¶ù Î¨∏Ïûê ÌôïÏù∏ ÏãúÏûë !------
        val callbacks = object : PhoneAuthProvider.OnVerificationStateChangedCallbacks() {
            override fun onVerificationCompleted(p0: PhoneAuthCredential) {}
            override fun onVerificationFailed(p0: FirebaseException) {
                Log.e("failedAuth", "$p0")
            }
            @RequiresApi(Build.VERSION_CODES.P)
            override fun onCodeSent(verificationId: String, token: PhoneAuthProvider.ForceResendingToken) {
                super.onCodeSent(verificationId, token)
                this@FindAccountDialogFragment.verificationId = verificationId
                Log.v("onCodeSent", "Î©îÏãúÏßÄ Î∞úÏÜ° ÏÑ±Í≥µ")
                // -----! Î©îÏãúÏßÄ Î∞úÏÜ°Ïóê ÏÑ±Í≥µÌïòÎ©¥ Ïä§ÎÇµÎ∞î Ìò∏Ï∂ú !------
                Snackbar.make(requireActivity().requireViewById(R.id.clIntro), "Î©îÏãúÏßÄ Î∞úÏÜ°Ïóê ÏÑ±Í≥µÌñàÏäµÎãàÎã§. Ïû†ÏãúÎßå Í∏∞Îã§Î†§Ï£ºÏÑ∏Ïöî", Snackbar.LENGTH_LONG).show()
                binding.btnFADConfirm.isEnabled = true
            }
        } // ------! Ïù∏Ï¶ù Î¨∏Ïûê ÌôïÏù∏ ÎÅù !------

        binding.btnFADConfirm.setOnClickListener{
            when (binding.btnFADConfirm.text) {
                "Ïù∏Ï¶ù ÌïòÍ∏∞" -> {
                    var transformMobile = phoneNumber82(binding.etFADMobile.text.toString())
                    val dialog = AlertDialog.Builder(requireContext())
                        .setTitle("üì© Î¨∏Ïûê Ïù∏Ï¶ù ")
                        .setMessage("$transformMobile Î°ú Ïù∏Ï¶ù ÌïòÏãúÍ≤†ÏäµÎãàÍπå?")
                        .setPositiveButton("Ïòà") { _, _ ->
                            transformMobile = transformMobile.replace("-", "")
                            Log.w("Ï†ÑÌôîÎ≤àÌò∏", transformMobile)
                            val optionsCompat = PhoneAuthOptions.newBuilder(firebaseAuth)
                                .setPhoneNumber(transformMobile)
                                .setTimeout(60L, TimeUnit.SECONDS)
                                .setActivity(requireActivity())
                                .setCallbacks(callbacks)
                                .build()
                            PhoneAuthProvider.verifyPhoneNumber(optionsCompat)
                            firebaseAuth.setLanguageCode("kr")

                            val alphaAnimation = AlphaAnimation(0.0f, 1.0f)
                            alphaAnimation.duration = 600
                            binding.etFADAuthNumber.isEnabled = true
                            binding.etFADAuthNumber.requestFocus()
                        }
                        .setNegativeButton("ÏïÑÎãàÏò§", null)
                        .show()

                    dialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(Color.BLACK)
                    dialog.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(Color.BLACK)
                }
                "ÏïÑÏù¥Îîî Ï∞æÍ∏∞" -> {
                    binding.clFADMobile.visibility = View.GONE
                    // ------! Ìï∏ÎìúÌè∞ Î≤àÌò∏Î•º Î≥¥ÎÇ¥Î©¥ ÏïÑÏù¥ÎîîÎ•º ÏïåÎ†§Ï£ºÎäî api ÌïÑÏöî !------
//                    getUserBySdk(getString(R.string.IP_ADDRESS_t_user), , requireContext()) { jo ->
//                        if (jo?.getInt("status") == 404) {
//                            requireActivity().runOnUiThread {
//                                val dialog = AlertDialog.Builder(requireContext())
//                                    .setTitle("ÏïåÎ¶º‚ö†Ô∏è")
//                                    .setMessage("ÏùºÏπòÌïòÎäî Í≥ÑÏ†ïÏù¥ ÏóÜÏäµÎãàÎã§.\nÎã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî")
//                                    .setPositiveButton("Ïòà") { _, _ -> }
//                                    .show()
//                                dialog.getButton(AlertDialog.BUTTON_POSITIVE).setTextColor(Color.BLACK)
//                                dialog.getButton(AlertDialog.BUTTON_NEGATIVE).setTextColor(Color.BLACK)
//                            }
//                        } else if (jo?.getInt("status") == 200) {
//                            requireActivity().runOnUiThread{
//                                binding.clFADId.visibility = View.VISIBLE
//                                binding.tvFADIdFinded.text = maskString(jo.optJSONObject("data")?.getString("user_id") ?: "")
//                            }
//                        }
//                    }
                    binding.btnFADAuthSend.text= "Ï¥àÍ∏∞ ÌôîÎ©¥ÏúºÎ°ú"
                }
                "ÎπÑÎ∞ÄÎ≤àÌò∏ Ï∞æÍ∏∞" -> {
                    // ------! ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Ï∞æÍ∏∞Î•º ÌïòÎ©¥ ÏïÑÏù¥ÎîîÏôÄ Ìï∏ÎìúÌè∞ Î≤àÌò∏Î•º ÎßûÌòÄÏÑú ÏùºÏπòÌïúÎã§Îäî Î≤àÌò∏Îßå ÏûàÏúºÎ©¥ Ïû¨ÏÑ§Ï†ïÌïòÎäî updateÌïòÍ∏∞.
//                    val email = when (binding.FADSpinner.selectedItemPosition) {
//                        0, 1, 2 -> {
//                            "${binding.etFADEmailId.text}@${binding.FADSpinner.selectedItem as String}"
//
//                        }
//                        else -> {
//                            "${binding.etFADEmailId.text}@${binding.etFADEmail.text}"
//                        }
//                    }
//                    if (binding.etFADEmailId.text.length != 0) {
//                        firebaseAuth.sendPasswordResetEmail(email).addOnCompleteListener{ task ->
//                            if (task.isSuccessful) {
//                                binding.tvFADPw.visibility = View.VISIBLE
//                                binding.clFADPw.visibility = View.GONE
//                                binding.btnFADConfirm.text = "Ï¥àÍ∏∞ ÌôîÎ©¥ÏúºÎ°ú"
//                            }
//                        }
//                    }
                }
            }
        }
        // ------! ÎπÑÎ∞ÄÎ≤àÌò∏ Ïû¨ÏÑ§Ï†ï ÎÅù !------

//        val domainList = listOf("gmail.com", "naver.com", "kakao.com", "ÏßÅÏ†ëÏûÖÎ†•")
//        binding.FADSpinner.adapter = SpinnerAdapter(requireContext(), R.layout.item_spinner, domainList)
//        binding.FADSpinner.onItemSelectedListener = object : AdapterView.OnItemSelectedListener{
//            @SuppressLint("SetTextI18n")
//            override fun onItemSelected(
//                parent: AdapterView<*>?,
//                view: View?,
//                position: Int,
//                id: Long
//            ) {
//                binding.FADSpinner.getItemAtPosition(position).toString()
//                if (position == 3) {
//                    binding.etFADEmail.visibility = View.VISIBLE
//                    binding.FADSpinner.visibility = View.GONE
//                    binding.ivFADSpinner.setOnClickListener{
//                        binding.FADSpinner.performClick()
//                        binding.FADSpinner.visibility = View.VISIBLE
//                    }
//                } else {
//                    binding.etFADEmail.visibility = View.GONE
//                    binding.etFADEmail.setText("")
//                    binding.FADSpinner.visibility = View.VISIBLE
//                }
//            }
//            override fun onNothingSelected(parent: AdapterView<*>?) {}
//        }


    }
    @SuppressLint("SetTextI18n")
    @RequiresApi(Build.VERSION_CODES.P)
    private fun signInWithPhoneAuthCredential(credential: PhoneAuthCredential) {
        firebaseAuth.signInWithCredential(credential)
            .addOnCompleteListener { task ->
                if (task.isSuccessful) {
                    requireActivity().runOnUiThread {
                        viewModel.mobileAuthCondition.value = true
                        binding.etFADAuthNumber.isEnabled = false
                        binding.etFADMobile.isEnabled = false

                        // ------! Î≤àÌò∏ Ïù∏Ï¶ù ÏôÑÎ£å !------
                        val snackbar = Snackbar.make(requireActivity().requireViewById(R.id.clSignIn), "Ïù∏Ï¶ùÏóê ÏÑ±Í≥µÌñàÏäµÎãàÎã§ !", Snackbar.LENGTH_SHORT)
                        snackbar.setAction("ÌôïÏù∏") { snackbar.dismiss() }
                        snackbar.setActionTextColor(Color.WHITE)
                        snackbar.show()
                        binding.btnFADConfirm.text = "ÏïÑÏù¥Îîî Ï∞æÍ∏∞"
                    }
                } else {
                    Log.w(ContentValues.TAG, "mobile auth failed.")
                }
            }
    }

    private fun phoneNumber82(msg: String) : String {
        val firstNumber: String = msg.substring(0,3)
        var phoneEdit = msg.substring(3)
        when (firstNumber) {
            "010" -> phoneEdit = "+8210$phoneEdit"
            "011" -> phoneEdit = "+8211$phoneEdit"
            "016" -> phoneEdit = "+8216$phoneEdit"
            "017" -> phoneEdit = "+8217$phoneEdit"
            "018" -> phoneEdit = "+8218$phoneEdit"
            "019" -> phoneEdit = "+8219$phoneEdit"
            "106" -> phoneEdit = "+82106$phoneEdit"
        }
        return phoneEdit
    }

    private fun maskString(input: String): String {
        return if (input.length > 3) {
            input.replaceRange(3, input.length, "*".repeat(input.length - 3))
        } else {
            input
        }
    }

    override fun onResume() {
        super.onResume()
        // full Screen code
        dialog?.window?.setLayout(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT)
        dialog?.window?.setBackgroundDrawable(ColorDrawable(Color.TRANSPARENT))
        dialog?.window?.clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND)
    }

}